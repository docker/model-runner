// Code generated by "stringer -linecomment -type GGUFMetadataValueType -output zz_generated.ggufmetadatavaluetype.stringer.go -trimprefix GGUFMetadataValueType"; DO NOT EDIT.

package gguf_parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[GGUFMetadataValueTypeUint8-0]
	_ = x[GGUFMetadataValueTypeInt8-1]
	_ = x[GGUFMetadataValueTypeUint16-2]
	_ = x[GGUFMetadataValueTypeInt16-3]
	_ = x[GGUFMetadataValueTypeUint32-4]
	_ = x[GGUFMetadataValueTypeInt32-5]
	_ = x[GGUFMetadataValueTypeFloat32-6]
	_ = x[GGUFMetadataValueTypeBool-7]
	_ = x[GGUFMetadataValueTypeString-8]
	_ = x[GGUFMetadataValueTypeArray-9]
	_ = x[GGUFMetadataValueTypeUint64-10]
	_ = x[GGUFMetadataValueTypeInt64-11]
	_ = x[GGUFMetadataValueTypeFloat64-12]
	_ = x[_GGUFMetadataValueTypeCount-13]
}

const _GGUFMetadataValueType_name = "Uint8Int8Uint16Int16Uint32Int32Float32BoolStringArrayUint64Int64Float64Unknown"

var _GGUFMetadataValueType_index = [...]uint8{0, 5, 9, 15, 20, 26, 31, 38, 42, 48, 53, 59, 64, 71, 78}

func (i GGUFMetadataValueType) String() string {
	if i >= GGUFMetadataValueType(len(_GGUFMetadataValueType_index)-1) {
		return "GGUFMetadataValueType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _GGUFMetadataValueType_name[_GGUFMetadataValueType_index[i]:_GGUFMetadataValueType_index[i+1]]
}
