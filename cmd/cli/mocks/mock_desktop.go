// Code generated by MockGen. DO NOT EDIT.
// Source: desktop.go
//
// Generated by this command:
//
//	mockgen -source=desktop.go -destination=../mocks/mock_desktop.go -package=mocks DockerHttpClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDockerHttpClient is a mock of DockerHttpClient interface.
type MockDockerHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockDockerHttpClientMockRecorder
	isgomock struct{}
}

// MockDockerHttpClientMockRecorder is the mock recorder for MockDockerHttpClient.
type MockDockerHttpClientMockRecorder struct {
	mock *MockDockerHttpClient
}

// NewMockDockerHttpClient creates a new mock instance.
func NewMockDockerHttpClient(ctrl *gomock.Controller) *MockDockerHttpClient {
	mock := &MockDockerHttpClient{ctrl: ctrl}
	mock.recorder = &MockDockerHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerHttpClient) EXPECT() *MockDockerHttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockDockerHttpClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockDockerHttpClientMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDockerHttpClient)(nil).Do), req)
}
